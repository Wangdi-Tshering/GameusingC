#include<stdio.h>
#include <conio.h>
#include <windows.h>
#include <stdlib.h>

#define WIDTH 20
#define HEIGHT 10

int gameOver, score;
int x, y, fruitX, fruitY, tailX[100], tailY[100];
int nTail;
enum eDirection { STOP = 0, LEFT, RIGHT, UP, DOWN};
enum eDirection dir;

void Setup() {
    gameOver = 0;
    dir = STOP;
    x = WIDTH / 2;
    y = HEIGHT / 2;
    fruitX = rand() % WIDTH;
    fruitY = rand() % HEIGHT;
    score = 0;
    nTail = 0; // initialize tail length
}

void Draw() {
    system("cls"); // clear screen for Windows, "clear" for Unix-like systems

    for (int i = 0; i < WIDTH + 2; i++)  // top border
        printf("#");
    printf("\n");

    for (int i = 0; i < HEIGHT; i++) {
        for (int j = 0; j < WIDTH; j++) {
            if (j == 0)
                printf("#"); // left wall
            if (i == y && j == x)
                printf("T"); // T-Rex head
            else if (i == fruitY && j == fruitX)
                printf("F"); // fruit
            else {
                int isPrint = 0;
                for (int k = 0; k < nTail; k++) {
                    if (tailX[k] == j && tailY[k] == i) {
                        printf("="); // T-Rex tail/body
                        isPrint = 1;
                    }
                }
                if (!isPrint)
                    printf(" ");
            }

            if (j == WIDTH - 1)
                printf("#"); // right wall
        }
        printf("\n");
    }

    for (int i = 0; i < WIDTH + 2; i++)  // bottom border
        printf("#");
    
    printf("\nScore: %d\n", score);
}

void Input() {
    if (_kbhit()) {
        switch (_getch()) {
            case 'a':
                dir = LEFT;
                break;
            case 'd':
                dir = RIGHT;
                break;
            case 'w':
                dir = UP;
                break;
            case 's':
                dir = DOWN;
                break;
            case 'x':
                gameOver = 1; // exit game
                break;
        }
    }
}

void Logic() {
    int prevX = tailX[0], prevY = tailY[0];
    int prev2X, prev2Y;
    tailX[0] = x;
    tailY[0] = y;

    // update body position
    for (int i = 1; i < nTail; i++) {
        prev2X = tailX[i];
        prev2Y = tailY[i];
        tailX[i] = prevX;
        tailY[i] = prevY;
        prevX = prev2X;
        prevY = prev2Y;
    }

    // move T-Rex head in the selected direction
    switch (dir) {
        case LEFT:
            x--;
            break;
        case RIGHT:
            x++;
            break;
        case UP:
            y--;
            break;
        case DOWN:
            y++;
            break;
        default:
            break;
    }

    // wrap around game board if T-Rex goes out of bounds
    if (x >= WIDTH) x = 0;
    else if (x < 0) x = WIDTH - 1;
    
    if (y >= HEIGHT) y = 0;
    else if (y < 0) y = HEIGHT - 1;

    // check for collision with body
    for (int i = 0; i < nTail; i++) {
        if (tailX[i] == x && tailY[i] == y)
            gameOver = 1;
    }

    // check if T-Rex eats fruit
    if (x == fruitX && y == fruitY) {
        score += 10;
        fruitX = rand() % WIDTH;
        fruitY = rand() % HEIGHT;

        // make sure the fruit doesn't spawn on the T-Rex
        for (int i = 0; i < nTail; i++) {
            if (tailX[i] == fruitX && tailY[i] == fruitY) {
                fruitX = rand() % WIDTH;
                fruitY = rand() % HEIGHT;
            }
        }

        nTail++;  // increase T-Rex length
    }
}

int main() {
    Setup();
    while (!gameOver) {
        Draw();
        Input();
        Logic();
        Sleep(100); // sleep for a while to control game speed
    }
    return 0;
}
